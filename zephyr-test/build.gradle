plugins {
	id 'idea'
	id 'war'
	id 'org.gretty' version '3.0.6'
	id 'com.adarshr.test-logger' version '3.0.0'
	id 'com.github.psxpaul.execfork' version '0.2.2'
}

idea {
	module {
		outputDir file("$buildDir/classes/main")
		testOutputDir file("$buildDir/classes/test")
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

repositories {
	mavenLocal()

	maven {
		url = uri('https://mavensync.zkoss.org/maven2')
	}

	maven {
		url = uri('https://mavensync.zkoss.org/eval')
	}

	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
}

group = "org.zkoss.zk"

dependencies {
	implementation "org.zkoss.zk:zhtml:${version}"
	implementation "org.zkoss.zk:zk:${version}"
	implementation "org.zkoss.zk:zul:${version}"
	implementation "org.zkoss.zk:zkex:${version}"
	implementation "org.zkoss.zk:zkmax:${version}"
	implementation "org.zkoss.zk:zkplus:${version}"
	implementation "org.zkoss.zk:zuti:${version}"
	implementation "org.zkoss.zk:stateless:${version}"
	implementation "org.zkoss.zk:stateless-ex:${version}"
	implementation "org.zkoss.zk:client-bind:${version}"
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'
	implementation 'org.slf4j:slf4j-jdk14:2.0.3'

	// for JSR 303
	implementation 'org.hibernate:hibernate-validator:5.3.6.Final'
	implementation 'javax.validation:validation-api:1.1.0.Final'

	//for webdriver test
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testImplementation 'org.springframework.session:spring-session-core:2.1.6.RELEASE'
	testImplementation "org.mockito:mockito-inline:4.7.0"
	testImplementation 'xml-apis:xml-apis:2.0.2'
	testImplementation 'org.slf4j:slf4j-jdk14:2.0.3'
	testImplementation 'org.zkoss.test:zk-webdriver:1.0.6'

	// workaround for running Mockito under Java 11
	providedCompile "net.bytebuddy:byte-buddy:1.8.22"
	providedCompile "net.bytebuddy:byte-buddy-agent:1.8.22"

}

test {
	useJUnitPlatform()
	testlogger {
		theme "standard"
		showExceptions true
		showStackTraces true
		showFullStackTraces true
		showCauses true
		slowThreshold 2000
		showSummary true
		showSimpleNames true
		showPassed true
		showSkipped true
		showFailed true
		showStandardStreams false
		showPassedStandardStreams true
		showSkippedStandardStreams true
		showFailedStandardStreams true
		logLevel "debug"
	}
}

test {
	systemProperty "zkWebdriverContextPath", "/zephyr-test"
	systemProperty "zkWebdriverTestURLPackage", "org.zkoss.zephyr.webdriver"
}

gretty {
	httpPort = 8081
}


// Start browsersync in the background.
// Beware that specifying `waitForPort` below could cause the spawned process to not be killed.
// In that case, check for `ps aux | grep gulp` and `localhost:300{n}` where n is odd.
task browsersync(type: com.github.psxpaul.task.ExecFork) {
    executable = 'npm'
    args = ['run', 'dev', '--', '--port', "${gretty.httpPort}", '--startPath', '/zephyr-test']
}

// WARNING: Do NOT move this task before the "dependencies" declaration; otherwise,
// `configurations.implementation.dependencies` will not work.
task devMode {
	dependsOn browsersync
	gretty {
		httpPort = gretty.httpPort
		beforeClassPath = []
		def allowedWorkspace = []
		configurations.implementation.dependencies.each {
			allowedWorkspace << it.group + ":" + it.name
		}
		addClassPath(gradle, beforeClassPath, [], allowedWorkspace)
	}
}

task appRunDev {
	dependsOn devMode
}
task appRunDebugDev {
	dependsOn devMode
}

def addClassPath(gradle, beforeClassPath, visitedBuilds, allowedWorkspace) {
	gradle.includedBuilds.each {
		if (visitedBuilds.contains(it.name)) return
		visitedBuilds << it.name
		def rootGradle = it.properties['gradle']
		it.properties['availableModules'].each {

			def prj = rootGradle.rootProject.findProject(it.right.identityPath.toString())
			if (!prj) {
				prj = rootGradle.rootProject.findProject(it.right.projectPath.toString())
			}
			if (prj && allowedWorkspace.contains(prj.group + ":" + prj.name)) {
				beforeClassPath << prj.sourceSets.main.output.resourcesDir
				println "add to classPath: " + prj.sourceSets.main.output.resourcesDir
			}
		}
		addClassPath(rootGradle, beforeClassPath, visitedBuilds, allowedWorkspace);
	}
}

appRunDev.dependsOn 'appRun'
appRunDebugDev.dependsOn 'appRunDebug'