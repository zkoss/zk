<!-- build.target.xml
	Purpose:
		The target definitions for build.xml
	Description:
		The target definitions are put in a separate file for two reasons:
		1) it is shared by two projects
		2) reduce the complexity of build.xml
	History:
		Wed Aug 21 18:01:44  2002, Created by tomyeh

Copyright (C) 2002-2006 Potix Corporation. All Rights Reserved.
-->

<!-- ======= -->
<!-- CODEGEN -->
<!-- ======= -->
<target name="codegen.mesg" depends="config.build" if="src.mesg.dir.exist">
	<!-- generate Mxx.java (e.g., MCommon.java) -->
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/genprop"/>
		<arg value="-x"/>
		<arg value="${src.mesg.dir}"/>
		<arg value="${src.dir}"/>
	</exec>
</target>

<!-- ================ -->
<!-- CODE STYLE CHECK -->
<!-- ================ -->

<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
		 classpath="${bin.dir}/checkstyle-6.14.1-all.jar"/>

<target name="checkstyle.java"
		 description="Check java code style"
		 depends="codegen.mesg"
		 if="${checkstyle.java}">
	<checkstyle config="${bin.dir}/zk_checks.xml">
		<fileset dir="." includes="**/*.java"/>
		<formatter type="plain"/>
	</checkstyle>
</target>

<target name="checkstyle.js"
		 description="Check javascript code style"
		 depends="codegen.mesg"
		 if="${checkstyle.js}">
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/jscheck"/>
		<arg value="${bin.dir}"/>
		<arg value="${src.dir}"/>
		<arg value="--config=${bin.dir}/zk_jscheck.json"/>
		<arg value="--max-errors=-1"/>
	</exec>
</target>

<!-- ======= -->
<!-- COMPILE -->
<!-- ======= -->
<target name="compile0" depends="checkstyle.java,checkstyle.js" if="srcpv.dir.exist">
	<mkdir dir="${out.dir}"/>
	<javac srcdir="${srcpv.dir}" destdir="${out.dir}"
	 debug="false" optimize="true" encoding="UTF-8"
	 deprecation="${deprecation}"
	 target="${target.version}" source="${source.version}">
		<compilerarg value="${javac.unchecked}"/>
	</javac>
</target>
<target name="compile1" depends="checkstyle.java,checkstyle.js,compile0" if="src.dir.exist">
	<mkdir dir="${out.dir}"/>
	<available file="srcdpc" property="srcdpc.dir" value="srcdpc"/>
	<property name="srcdpc.dir" value=""/>
	<javac srcdir="${src.dir}:${codegen.dir}:${srcdpc.dir}" destdir="${out.dir}"
	 debug="${debug}" optimize="${optimize}" encoding="UTF-8"
	 deprecation="${deprecation}"
	 target="${target.version}" source="${source.version}">
		<compilerarg value="${javac.unchecked}"/>
	</javac>
</target>
<target name="compile" depends="compile0,compile1" if="compile.required">
</target>

<!-- ====== -->
<!-- DEPLOY -->
<!-- ====== -->
<target name="deploy.lib" depends="config.build" if="deploy.lib.required">
	<copy todir="${dist.lib.dir}" preservelastmodified="yes">
		<fileset dir="${out.dir}" includes="${xar.name}"/>
	</copy>
</target>

<target name="stop.service" depends="config.build"
if="start.service.required">
	<exec executable="net" dir="." failonerror="false">
		<arg value="stop"/>
		<arg value="${start.service}"/>
	</exec>
</target>
<target name="start.service" depends="config.build"
if="start.service.required">
	<exec executable="net" dir="." failonerror="false">
		<arg value="start"/>
		<arg value="${start.service}"/>
	</exec>
</target>
<target name="deploy.tomcat.files" depends="config.build"
if="deploy.tomcat.required">
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/deploy.unzip.war"/>
		<arg value="${dist.lib.dir}"/>
		<arg value="${tomcat.webapps.dir}"/>
		<arg value="${ear.libs}"/>
		<arg value="${root.context}/ROOT"/>
	</exec>

	<copy todir="${tomcat.lib.dir}" preservelastmodified="yes">
		<fileset dir="${dist.lib.dir}" includes="${server.libs}"/>
		<fileset dir="${dist.lib.ext.dir}" includes="${server.libs}"/>
	</copy>
</target>
<target name="deploy.tomcat"
depends="config.build, stop.service, deploy.tomcat.files, start.service"
if="deploy.tomcat.required">
</target>

<target name="deploy.osgi" if="deploy.lib.required">
	<move overwrite="true" todir="${dist.osgi.dir}" >
		<fileset dir="${dist.osgi.dir}" includes="*.bar" />
		<mapper type="glob" from="*.bar" to="*.osgi.jar" />
	</move>
</target>

<target name="deploy" depends="deploy.lib, deploy.osgi, deploy.tomcat">
</target>

<target name="dev" depends="config, gentime">
	<delete file="${zkcmldir}/zkex/${codegen.archive.dir}/metainfo/zk/buildsign" verbose="true" failonerror="false" />
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/genmd5sign"/>
		<arg value="${codegen.dir}/${signdir}"/>
		<arg value="${signclasses}"/>
		<arg value="${out.dir}/classes"/>
		<arg value="${maindir}/zk/${codegen.dir}/${buildstamp}"/>
		<arg value="${maindir}"/>
	</exec>
</target>

<!-- ===== -->
<!-- BUILD -->
<!-- ===== -->
<!-- <target name="lessc">
	<java classname="CpLess" fork="true">
		<arg value="${src.archive.dir}"/>
		<arg value="${codegen.archive.dir}"/>
		<classpath>
			<pathelement path="${src.archive.dir}"/>
			<pathelement path="${maindir}/zul/${src.archive.dir}"/>
			<pathelement path="${maindir}/zkmax/${src.archive.dir}"/>
			<pathelement location="${dist.lib.ext.dir}/zkless.jar"/>
			<pathelement location="${dist.lib.ext.dir}/lesscss-engine.jar"/>
			<pathelement location="${dist.lib.ext.dir}/js.jar"/>
			<pathelement location="${dist.lib.ext.dir}/zkjszips.jar"/>
			<pathelement location="${dist.lib.ext.dir}/yuicompressor.jar"/>
			<pathelement location="${dist.lib.ext.dir}/commons-logging.jar"/>
		</classpath>
	</java>
</target> -->
<target name="lessc">
	<exec executable="node">
		<arg value="${maindir}/bin/node_modules/zkless-engine/lib/CpLess.js" />
		<arg value="${src.archive.dir}"/>
		<arg value="${codegen.archive.dir}"/>
		<arg path="${maindir}/zul/${src.archive.dir}"/>
		<arg path="${zkcmldir}/zkmax/${src.archive.dir}"/>
	</exec>
	<java classname="CompressCss" fork="true">
		<arg value="${src.archive.dir}"/>
		<arg value="${codegen.archive.dir}"/>
		<classpath>
			<pathelement path="${src.archive.dir}"/>
			<pathelement location="${dist.lib.ext.dir}/zkjszips.jar"/>
			<pathelement location="${dist.lib.ext.dir}/yuicompressor.jar"/>
			<pathelement location="${dist.lib.ext.dir}/commons-io.jar"/>
			<pathelement location="${dist.lib.ext.dir}/CssCompressor.jar"/>
		</classpath>
	</java>
</target>
<target name="zipjs">
	<mkdir dir="${src.archive.dir}"/>
	<mkdir dir="${codegen.archive.dir}"/>
	<java classname="ZipJS" fork="true">
		<arg value="${src.archive.dir}/${zipjs}"/>
		<arg value="${codegen.archive.dir}/${zipjs}"/>
		<arg value="true"/>
		<jvmarg value="-Xss1024k"/>
		<classpath>
			<pathelement location="${dist.lib.ext.dir}/zkjszips.jar"/>
			<pathelement location="${dist.lib.ext.dir}/yuicompressor.jar"/>
			<pathelement location="${dist.lib.ext.dir}/commons-io.jar"/>
			<pathelement location="${dist.lib.ext.dir}/closure-compiler.jar"/>
		</classpath>
	</java>
	
	<delete>
		<fileset dir="${codegen.archive.dir}" includes="**/*.css.dsp.src"/>
	</delete>
	
	<java classname="ZipJS" fork="true">
		<arg value="${src.archive.dir}/${zipcss}"/>
		<arg value="${codegen.archive.dir}/${zipcss}"/>
		<jvmarg value="-Xss1024k"/>
		<classpath>
			<pathelement location="${dist.lib.ext.dir}/zkjszips.jar"/>
			<pathelement location="${dist.lib.ext.dir}/yuicompressor.jar"/>
			<pathelement location="${dist.lib.ext.dir}/commons-io.jar"/>
			<pathelement location="${dist.lib.ext.dir}/closure-compiler.jar"/>
		</classpath>
	</java>
</target>
<target name="build.jar" depends="lessc, zipjs, gentime, genmd5sign, compile" if="build.jar.required">
	<available file="${srcpv.dir}" property="jar.srcpv.dir" value="${srcpv.dir}"/>
	<property name="jar.srcpv.dir" value="${codegen.archive.dir}"/><!-- could be any existent directory -->

	 <condition property="ignoreZKMaxCodegenFolder" value="NAN" else="zkmax">
		<equals arg1="${jar.name}" arg2="zkmax.jar" trim="true"/>
	</condition>
	 <condition property="ignoreZulCodegenFolder" value="zul" else="NAN">
	 	<or>
			<equals arg1="${jar.name}" arg2="zkmax.jar" trim="true"/>
			<equals arg1="${jar.name}" arg2="zkex.jar" trim="true"/>
		</or>
	</condition>

	<jar jarfile="${out.dir}/${jar.name}" manifest="${manifest.mf}">
		<fileset dir="${out.dir}" excludes="${exclude.list}"/>
		<fileset dir="${jar.srcpv.dir}" includes="zkPublicCert.store zkEvalPublicCert.store **/**.properties"/>
		<fileset dir="${src.archive.dir}" includes="**"
		 excludes="META-INF/MANIFEST.MF, ${zipjs}/**, ${zipcss}/**"/>
		<fileset dir="${src.archive.dir}" includes="${zipjs}/**/**.less" />
		<fileset dir="${codegen.archive.dir}" includes="**"
		 excludes="META-INF/MANIFEST.MF, **/**.less, **/${ignoreZKMaxCodegenFolder}/**, **/${ignoreZutiCodegenFolder}/**, **/${ignoreZulCodegenFolder}/**"/>
	</jar>
</target>
<target name="build.jar2" depends="build.jar" if="build.jar2.required">
	<condition property="ignoreZKMaxCodegenFolder" value="NAN" else="zkmax">
		<equals arg1="${jar.name}" arg2="zkmax.jar" trim="true"/>
	</condition>
	<condition property="ignoreZutiCodegenFolder" value="NAN" else="zuti">
		<equals arg1="${jar.name}" arg2="zuti.jar" trim="true"/>
	</condition>
	 <condition property="ignoreZulCodegenFolder" value="zul" else="NAN">
	 	<or>
			<equals arg1="${jar.name}" arg2="zkmax.jar" trim="true"/>
			<equals arg1="${jar.name}" arg2="zuti.jar" trim="true"/>
			<equals arg1="${jar.name}" arg2="zkex.jar" trim="true"/>
		</or>
	</condition>
	<jar jarfile="${out.dir}/${jar2.name}" manifest="${manifest.mf}">
		<fileset dir="${out.dir}" excludes="${exclude.list}"/>
		<fileset dir="${jar.srcpv.dir}" includes="zkPublicCert.store zkEvalPublicCert.store **/**.properties"/>
		<fileset dir="${src.archive.dir}" includes="**"
		 excludes="META-INF/MANIFEST.MF, ${zipjs}/**, ${zipcss}/**"/>
		<fileset dir="${src.archive.dir}" includes="${zipjs}/**/**.less" />
		<fileset dir="${codegen.archive.dir}" includes="**" 
		 excludes="META-INF/MANIFEST.MF, **/*.src.js, **/**.less, **/${ignoreZKMaxCodegenFolder}/**, **/${ignoreZutiCodegenFolder}/**, **/${ignoreZulCodegenFolder}/**"/>
	</jar>
</target>
<target name="gentime" depends="config" if="gentime.required">
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/gentime"/>
		<arg value="${codegen.dir}/${gentime}"/>
	</exec>
</target>
<target name="genmd5sign" depends="config" if="genmd5sign.required">
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/genmd5sign"/>
		<arg value="${codegen.dir}/${signdir}"/>
		<arg value="${signclasses}"/>
		<arg value="${out.dir}"/>
		<arg value="${maindir}/zk/${codegen.dir}/${buildstamp}"/>
		<arg value="${maindir}"/>
	</exec>
</target>

<target name="build.war" depends="compile" if="build.war.required">
	<mkdir dir="${out.dir}"/>
	
	<property name="src.web.xml" value="${war.dir}/WEB-INF/web.xml"/>
		<!-- to let other targets have a chance to override it -->
	<war warfile="${out.dir}/${war.name}" webxml="${src.web.xml}"
	manifest="${war.dir}/META-INF/MANIFEST.MF">
		<fileset dir="${war.dir}" includes="**"
		 excludes="WEB-INF/web.xml, META-INF/MANIFEST.MF"/>

		<lib dir="${dist.lib.ext.dir}" includes="${war.libs}"/>
		<lib dir="${dist.lib.dir}" includes="${war.libs}"/>
		<classes dir="${out.dir}" includes="**" excludes="${exclude.list}"/>
	</war>
</target>

<target name="build.ear" depends="config.build" if="build.ear.required">
	<mkdir dir="${out.dir}"/>
	<!-- build ear -->
	<ear earfile="${out.dir}/${ear.name}" manifest="${manifest.mf}"
	 appxml="${application.xml}">
		<fileset dir="${dist.lib.dir}" includes="${ear.libs}"/>
		<fileset dir="${src.archive.dir}"
		 includes="META-INF/**"
		 excludes="META-INF/MANIFEST.MF, META-INF/application.xml"/>
	</ear>
</target>

<target name="build.osgi1" depends="build.jar" if="build.jar.required">
	<mkdir dir="${dist.osgi.dir}"/>
	<echo file="${dist.osgi.dir}/${bnd.config.name}" message="Bundle-Version:${project.version}"/>
</target>

<target name="build.osgi2" depends="build.jar2" if="build.jar2.required">
	<echo file="${dist.osgi.dir}/${bnd2.config.name}" message="Bundle-Version:${project.version}"/>
</target>

<target name="build.osgi3" depends="build.jar" if="build.zweb">
	<echo file="${dist.osgi.dir}/${bnd.config.name}" append="true" message="${line.separator}Import-Package:javax.servlet.annotation;resolution:=optional,*;resolution:=optional"/>
</target>

<target name="build.osgi4" depends="build.jar" if="build.zkbind">
	<echo file="${dist.osgi.dir}/${bnd.config.name}" append="true" message="${line.separator}Import-Package:javassist.util.proxy;resolution:=optional,*;resolution:=optional"/>
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/zjavassist"/>
		<arg value="${project.version}"/>
		<arg value="${maindir}"/>
	</exec>
</target>

<target name="build.osgi" depends="build.osgi1, build.osgi2, build.osgi3, build.osgi4" if="build.jar.required">
	<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${bnd.lib.jar}"/>
	<bndwrap output="${dist.osgi.dir}" definitions="${dist.osgi.dir}">
		<fileset dir="${out.dir}" includes="${jar.name}, ${jar2.name}"/>
	</bndwrap>
	<delete quiet="true">
		<fileset dir="${dist.osgi.dir}" includes="${bnd.config.name}, ${bnd2.config.name}"/>
	</delete>
</target>

<target name="build"
 depends="config.build, build.war, build.jar, build.jar2, build.ear, build.osgi, deploy">
</target>

<!-- ===== -->
<!-- CLEAN -->
<!-- ===== -->
<target name="clean">
	<delete quiet="true" dir="${out.dir}"/>
	<delete quiet="true" dir="${tmp.dir}"/>
	<delete quiet="true" dir="${outv.dir}"/>
	<delete quiet="true" dir="${codegen.dir}"/>
	<delete quiet="true">
		<fileset dir="${dist.lib.dir}" includes="${xar.name}"/>
		<!--fileset dir="${tomcat.lib.dir}" includes="${xar.name}"/-->
		<fileset dir="${tomcat.webapps.dir}" includes="${xar.name}"/>
		<fileset dir="${dist.osgi.dir}" includes="${xar.name}"/>
	</delete>
</target>

<!-- ========= -->
<!-- UNIT TEST -->
<!-- ========= -->
<target name="utest" depends="build">
	<property name="class.test" value="**/*Test.java"/><!-- test all if not defined -->

	<echo message="Test ${class.test}..."/>
	<junit fork="yes" haltonerror="${haltonerror}" dir="${out.dir}">
		<jvmarg value="-ea"/>
		<formatter type="plain" usefile="false"/>
		<classpath>
			<pathelement path="${java.class.path}"/>
			<pathelement location="${out.dir}"/>
		</classpath>
		<batchtest>
			<fileset dir="${src.dir}" includes="${class.test}"/>
		</batchtest>
	</junit>
</target>

<!-- ============= -->
<!-- MISCELLANEOUS -->
<!-- ============= -->
<target name="javadoc" depends="config.build">
	<condition property="jdk8.property" value="-Xdoclint:none --allow-script-in-comments" else="">
		<not>
			<or>
				<equals arg1="${ant.java.version}" arg2="1.4"/>
				<equals arg1="${ant.java.version}" arg2="1.5"/>
				<equals arg1="${ant.java.version}" arg2="1.6"/>
				<equals arg1="${ant.java.version}" arg2="1.7"/>
			</or>
		</not>
	</condition>
	<javadoc 
	 destdir="${working.javadoc.dir}"
	 sourcepath="${src.dir}:${codegen.dir}"
	 author="true" protected="true" version="true" use="true"
	 windowtitle="${project.title} ${project.version} API"
	 doctitle="${project.title} ${project.version} API"
	 additionalparam="-breakiterator -source ${source.version} ${jdk8.property}">
	 <bottom><![CDATA[Copyright &copy; 2005-${currentYear} Potix Corporation. All Rights Reserved.
<a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=152762&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a><script type="text/javascript">if (location.href.indexOf('zkoss.org') >= 0) {var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));}</script><script type="text/javascript">if (location.href.indexOf('zkoss.org') >= 0) {var pageTracker = _gat._getTracker("UA-121377-3");pageTracker._setDomainName("zkoss.org");pageTracker._initData();pageTracker._trackPageview();}</script>
	 ]]></bottom>
		<classpath>
			<pathelement path="${javadoc.class.path}"/>
			<pathelement path="${dist.lib.dir}/zcommons-el.jar"/>
		</classpath>
	</javadoc>

	<delete quiet="true" dir="${dist.javadoc.dir}"/>
	<move todir="${dist.javadoc.dir}">
		<fileset dir="${working.javadoc.dir}"/>
	</move>
	<delete quiet="true" dir="${working.javadoc.dir}"/>
	<delete quiet="true" dir="${working.dir}"/>

	<!-- copy xml and html to the destination since they might be referenced
		by package.html -->
	<copy todir="${dist.javadoc.dir}" preservelastmodified="yes">
		<fileset dir="${src.dir}"
		 includes="org/zkoss/**/*.xml, org/zkoss/**/*.html"
		 excludes="**/package.html" />
	</copy>
</target>

<target name="jsdoc">
	<!-- generate JavaScript Doc -->
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/jsdoc"/>
		<arg value="${project.name}"/>
		<arg value="${maindir}"/>
	</exec>
</target>


<!-- ============= -->
<!-- VERSION CHECK -->
<!-- ============= -->
<target name="check.version.freshly" if="${freshly}">
	<echo message="check version files for freshly version."/>
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="build.setting"/>
		<param name="regexp" value="${version.text.freshly}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="zk/**/Version.java"/>
		<param name="regexp" value="${version.java.release.freshly}"/>
		<param name="doCheck" value="true"/>
	</antcall>
</target>

<target name="check.version.official" unless="${freshly}" depends="check.version.freshly">
	<echo message="check version files for official version."/>
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="build.setting"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="zk/**/Version.java"/>
		<param name="regexp" value="${version.java.release}"/>
		<param name="doCheck" value="true"/>
	</antcall>
</target>

<target name="check.version" depends="check.version.freshly, check.version.official">
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="deploy/version"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="dir" value="."/>
		<param name="path" value="jsdoc/version"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	
	<!-- app -->
	<antcall target="check.version.app">
		<param name="package" value="zksandbox"/>
		<param name="dir" value="."/>
	</antcall>
	<antcall target="check.version.app">
		<param name="package" value="zksandboxs"/>
		<param name="dir" value="."/>
	</antcall>
	<antcall target="check.version.app">
		<param name="package" value="zktest"/>
		<param name="dir" value="."/>
	</antcall>
	
	<!-- packages -->
	<antcall target="check.version.package">
		<param name="package" value="zel"/>
		<param name="dir" value="."/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zcommon"/>
		<param name="dir" value="."/>
		<param name="check.xel.config.uid" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zhtml"/>
		<param name="dir" value="."/>
		<param name="check.lang.uid" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zk"/>
		<param name="dir" value="."/>
		<param name="check.tld.config.uid" value="true"/>
		<param name="check.zk.config.uid" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zkplus"/>
		<param name="dir" value="."/>
		<param name="check.lang-addon.uid" value="true"/>
		<param name="check.lang-addon.zk-version" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zkbind"/>
		<param name="dir" value="."/>
		<param name="check.lang-addon.uid" value="true"/>
		<param name="check.lang-addon.zk-version" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zul"/>
		<param name="dir" value="."/>
		<param name="check.lang.uid" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zweb"/>
		<param name="dir" value="."/>
		<param name="check.tld.config.uid" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zkex"/>
		<param name="dir" value="${ZKCML}"/>
		<param name="check.zk.config.uid" value="true"/>
		<param name="check.zk.config.zk-version" value="true"/>
		<param name="check.lang-addon.uid" value="true"/>
		<param name="check.lang-addon.zk-version" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zkmax"/>
		<param name="dir" value="${ZKCML}"/>
		<param name="check.xel.config.uid" value="true"/>
		<param name="check.zk.config.uid" value="true"/>
		<param name="check.lang-addon.uid" value="true"/>
		<param name="check.lang-addon.zk-version" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zuti"/>
		<param name="dir" value="${ZKCML}"/>
		<param name="check.zk.config.uid" value="true"/>
		<param name="check.zk.config.zk-version" value="true"/>
		<param name="check.lang-addon.uid" value="true"/>
		<param name="check.lang-addon.zk-version" value="true"/>
	</antcall>
	<antcall target="check.version.package">
		<param name="package" value="zml"/>
		<param name="dir" value="${ZKCML}"/>
		<param name="check.zk.config.uid" value="true"/>
		<param name="check.lang.uid" value="true"/>
	</antcall>
</target>

<target name="check.version.file" if="${doCheck}">
	<echo message="checking ${path}"/>
	<fileset id="file" dir="${dir}" includes="${path}">
		<containsregexp expression="${regexp}"/>
	</fileset>
	<fail message="error in ${path}.">
		<condition>
			<resourcecount when="eq" count="0" refid="file" />
		</condition>
	</fail>
</target>

<target name="check.version.app">
	<antcall target="check.version.file">
		<param name="path" value="${package}/version"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/META-INF/MANIFEST.MF"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
</target>

<target name="check.version.package">
	<antcall target="check.version.file">
		<param name="path" value="${package}/version"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/META-INF/MANIFEST.MF"/>
		<param name="regexp" value="${version.text}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/**/Version.java"/>
		<param name="regexp" value="${version.java.uid}"/>
		<param name="doCheck" value="true"/>
	</antcall>
	
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/xel/config.xml"/>
		<param name="regexp" value="${version.tag.uid}"/>
		<param name="doCheck" value="${check.xel.config.uid}"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/tld/config.xml"/>
		<param name="regexp" value="${version.tag.uid}"/>
		<param name="doCheck" value="${check.tld.config.uid}"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/zk/config.xml"/>
		<param name="regexp" value="${version.tag.uid}"/>
		<param name="doCheck" value="${check.zk.config.uid}"/>
	</antcall>
	
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/zk/lang.xml"/>
		<param name="regexp" value="${version.tag.uid}"/>
		<param name="doCheck" value="${check.lang.uid}"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/zk/lang-addon.xml"/>
		<param name="regexp" value="${version.tag.uid}"/>
		<param name="doCheck" value="${check.lang-addon.uid}"/>
	</antcall>
	<antcall target="check.version.file">
		<param name="path" value="${package}/src/archive/metainfo/zk/lang-addon.xml"/>
		<param name="regexp" value="${version.tag.zk-version}"/>
		<param name="doCheck" value="${check.lang-addon.zk-version}"/>
	</antcall>
</target>